#!/usr/bin/env python3

import subprocess
import argparse
import os
import json
import sys
from ecs import *

parser = argparse.ArgumentParser()

parser.add_argument('--version', default='')
parser.add_argument('--name', default='')
parser.add_argument('--create-service', action='store_true', default=False)
parser.add_argument('--start', action='store_true', default=False)
parser.add_argument('--update', action='store_true', default=False)
parser.add_argument('--update-all', action='store_true', default=False)
parser.add_argument('--down', action='store_true', default=False)
parser.add_argument('--configure-all-services', action='store_true', default=False)
parser.add_argument('--get-manifest', action='store_true', default=False)
parser.add_argument('--dump-env', action='store_true')
parser.add_argument('--delete', action='store_true')
parser.add_argument('--deep-clean-services', action='store_true')
parser.add_argument('--overwrite', action='store_true')


os.environ['PATH'] = os.environ['PATH'] + ':' + os.environ['DEPLOYMENT_ROOT']+'/bin/'
os.environ['AWS_PAGER'] = ''
project_name = os.environ['PROJECT_NAME']
cluster_name = f'{project_name}-cluster'

all_components = []
with open(f'{os.environ["DEPLOYMENT_ROOT"]}/etc/manifest.txt') as manif:
    manifest = {line.split("=")[0].strip(): line.split("=")[1].strip() for line in filter(lambda ln: "=" in ln,  manif.read().split("\n"))}


temp_dir = f'{os.environ["DEPLOYMENT_ROOT"]}/tmp'
if not os.path.exists(temp_dir):
    os.mkdir(temp_dir)

args = parser.parse_args()
if args.get_manifest:
    print( "\n".join(["{}: {}".format(key, manifest.get(key)) for key in manifest]))
    sys.exit()
if args.dump_env:
    print(json.dumps(dict(**os.environ), indent=4))
    sys.exit()

ecs_task_location = f'{os.environ["DEPLOYMENT_ROOT"]}/etc/aws/ecs/tasks'
ecs_service_location = f'{os.environ["DEPLOYMENT_ROOT"]}/etc/aws/ecs/services'
task_template = f'{ecs_task_location}/task-template.json'
service_template = f'{ecs_service_location}/service-template.json'
deployment_root = f'{os.environ["DEPLOYMENT_ROOT"]}'


#######################################
# Start and stop either all or one serv
# ice
#######################################
def start(args):
    update_service_args = ['aws', 'ecs', 'update-service', '--service', args.name,  '--cluster', cluster_name]
    if args.down:
        if args.name == '':
            for name in manifest:
                out = execute('aws', 'ecs', 'update-service', '--cluster', cluster_name, '--service', f'{name}','--desired-count', '0')
                print(json.dumps(out, indent=4))
        else:
            out = execute(*update_service_args, '--desired-count', '0')
            print(json.dumps(out, indent=4))
        sys.exit()

def stop(args):
    update_service_args = ['aws', 'ecs', 'update-service', '--service', args.name,  '--cluster', cluster_name]
    if args.start:
        if args.name == "":
            for name in manifest:
                out = execute('aws', 'ecs', 'update-service', '--cluster', cluster_name, '--service', f'{name}','--desired-count', '1')
                print(json.dumps(out, indent=4))
        else:
            out = execute(*update_service_args, '--desired-count', '1')
            print(json.dumps(out, indent=4))
        sys.exit()
stop(args)
start(args)

#######################################
# Configure a new service template file
#######################################


def createOrUpdateServiceWithTask(args):
    """
    Populate the complete template file
    with the version number and aws params
    """
    nameEnvVar = f'COMPONENT_NAME={args.name},PROJECT_NAME={project_name}'
    temp_task_file = f'{temp_dir}/{args.name}-task.json'
    ecs_task_file_template = f'{ecs_task_location}/{args.name}-task.template.json'
    execute('populate', '--file', ecs_task_file_template, '--outfile', temp_task_file, '--env-list', f'{nameEnvVar},COMPONENT_VERSION={args.version}')
    taskDefinitionArn = execute('aws', 'ecs', 'register-task-definition', '--cli-input-json', f'file://{temp_task_file}', **os.environ)
    update_service_args = ['aws', 'ecs', 'update-service', '--service', args.name,  '--cluster', cluster_name]
    print(taskDefinitionArn)
    if args.create_service and input(f'Are you sure you want to create service {args.name}? [Y/n]: ') == 'Y':
        print('creating template files')
        promptUserForFile(ecs_task_file_template, lambda: execute('populate', '--file', task_template, '--outfile', ecs_task_file_template,'--env-list', nameEnvVar, '--no-defaults'),no_interupt=False)
        promptUserForFile(ecs_service_file_template, lambda: execute('populate', '--file', service_template, '--outfile', ecs_service_file_template, '--env-list', nameEnvVar,'--no-defaults'), no_interupt=False)
        temp_service_file = f'{temp_dir}/{args.name}-service.json'
        createServiceRegistry(args.name)
        createServiceEnvVars = f'TASK_DEFINITION={taskDefinitionArn.split("/")[-1]},SERVICE_REGISTRY_ARN={getServiceRegistryVal(args.name, "Arn")},{nameEnvVar}'
        execute('populate', '--file', ecs_service_file_template, '--outfile', temp_service_file, '--env-list', createServiceEnvVars)
        temp_service_file = f'{temp_dir}/{args.name}-service.json'
        execute('aws', 'ecs', 'create-service', '--cli-input-json', f'file://{temp_service_file}')

    out = execute(*update_service_args, '--task-definition', taskDefinitionArn.get('taskDefinition').get('taskDefinitionArn'), '--desired-count', '0')
    print(out)

def updateAll(args):
    for component in manifest:
        args.name = component
        args.version = manifest.get(component)
        createOrUpdateServiceWithTask(args)

#######################################
# Create the AWS service and a registry
#######################################
if (args.create_service or args.update) and args.version != '' and args.name != '':
    createOrUpdateServiceWithTask(args)


#######################################
# Configure everything fresh
#######################################
if args.configure_all_services:
    args.create_service = True
    updateAll(args)
if args.delete and args.name != '':
    execute('ecs', '--down', '--name', args.name)
    tearDownService(args.name)

if args.deep_clean_services:
    execute('ecs', '--down')
    [tearDownService(name) for name in manifest]

if args.update_all:
    updateAll(args)
